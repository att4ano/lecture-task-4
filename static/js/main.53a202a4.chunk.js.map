{"version":3,"sources":["GeneratorSimulation.js","App.js","index.js"],"names":["GeneratorSimulation","magneticField","setMagneticField","useState","rotationFrequency","setRotationFrequency","circuitResistance","setCircuitResistance","useEffect","ctx","document","getElementById","getContext","chart","Chart","type","data","labels","datasets","label","borderColor","borderWidth","options","scales","x","title","display","text","y","updateChartData","time","emf","inductionCurrent","t","push","toFixed","angularFrequency","Math","PI","emfValue","sin","inductionCurrentValue","update","destroy","_jsxs","children","_jsx","value","onChange","e","parseFloat","target","id","width","height","App","ReactDOM","render"],"mappings":"mLA+GeA,MA5GaA,KACxB,MAAOC,EAAeC,GAAoBC,mBAAS,IAC5CC,EAAmBC,GAAwBF,mBAAS,IACpDG,EAAmBC,GAAwBJ,mBAAS,GAoE3D,OAlEAK,qBAAU,KACN,MAAMC,EAAMC,SAASC,eAAe,kBAAkBC,WAAW,MAC3DC,EAAQ,IAAIC,IAAML,EAAK,CACzBM,KAAM,OACNC,KAAM,CACFC,OAAQ,GACRC,SAAU,CACN,CACIC,MAAO,qBACPC,YAAa,oBACbC,YAAa,EACbL,KAAM,IAEV,CACIG,MAAO,8FACPC,YAAa,oBACbC,YAAa,EACbL,KAAM,MAIlBM,QAAS,CACLC,OAAQ,CACJC,EAAG,CACCC,MAAO,CACHC,SAAS,EACTC,KAAM,mCAGdC,EAAG,CACCH,MAAO,CACHC,SAAS,EACTC,KAAM,yDA6B1B,MAtBwBE,MACpB,MAAMC,EAAO,GACPC,EAAM,GACNC,EAAmB,GACzB,IAAK,IAAIC,EAAI,EAAGA,GAAK,GAAIA,GAAK,IAAM,CAChCH,EAAKI,KAAKD,EAAEE,QAAQ,IACpB,MAAMC,EAAmB,EAAIC,KAAKC,GAAKlC,EACjCmC,EAAWtC,EAAgBmC,EAAmB9B,EAAoB+B,KAAKG,IAAIJ,EAAmBH,GACpGF,EAAIG,KAAKK,EAASJ,QAAQ,IAC1B,MAAMM,EAAwBF,EAAWjC,EACzC0B,EAAiBE,KAAKO,EAAsBN,QAAQ,GACxD,CAGAtB,EAAMG,KAAKC,OAASa,EACpBjB,EAAMG,KAAKE,SAAS,GAAGF,KAAOe,EAC9BlB,EAAMG,KAAKE,SAAS,GAAGF,KAAOgB,EAC9BnB,EAAM6B,QAAQ,EAGlBb,GAEO,KACHhB,EAAM8B,SAAS,CAClB,GACF,CAAC1C,EAAeG,EAAmBE,IAGlCsC,eAAA,OAAAC,SAAA,CACIC,cAAA,OAAAD,SACID,eAAA,SAAAC,SAAA,CAAO,0IAEHC,cAAA,SACI/B,KAAK,SACLgC,MAAO9C,EACP+C,SAAWC,GAAM/C,EAAiBgD,WAAWD,EAAEE,OAAOJ,eAIlED,cAAA,OAAAD,SACID,eAAA,SAAAC,SAAA,CAAO,+FAEHC,cAAA,SACI/B,KAAK,SACLgC,MAAO3C,EACP4C,SAAWC,GAAM5C,EAAqB6C,WAAWD,EAAEE,OAAOJ,eAItED,cAAA,OAAAD,SACID,eAAA,SAAAC,SAAA,CAAO,6HAEHC,cAAA,SACI/B,KAAK,SACLgC,MAAOzC,EACP0C,SAAWC,GAAM1C,EAAqB2C,WAAWD,EAAEE,OAAOJ,eAItED,cAAA,UAAQM,GAAG,iBAAiBC,MAAM,MAAMC,OAAO,UAC7C,EC/FCC,MATHA,IAEJX,eAAA,OAAAC,SAAA,CACIC,cAAA,MAAAD,SAAI,0LACJC,cAAC9C,EAAmB,OCFhCwD,IAASC,OAAOX,cAACS,EAAG,IAAK7C,SAASC,eAAe,Q","file":"static/js/main.53a202a4.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Chart from 'chart.js/auto';\n\nconst GeneratorSimulation = () => {\n    const [magneticField, setMagneticField] = useState(1);\n    const [rotationFrequency, setRotationFrequency] = useState(1);\n    const [circuitResistance, setCircuitResistance] = useState(1);\n\n    useEffect(() => {\n        const ctx = document.getElementById('generatorChart').getContext('2d');\n        const chart = new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: [],\n                datasets: [\n                    {\n                        label: 'ЭДС',\n                        borderColor: 'rgb(255, 99, 132)',\n                        borderWidth: 2, // Устанавливаем толщину линии\n                        data: [],\n                    },\n                    {\n                        label: 'Индукционный ток',\n                        borderColor: 'rgb(54, 162, 235)',\n                        borderWidth: 2, // Устанавливаем толщину линии\n                        data: [],\n                    },\n                ],\n            },\n            options: {\n                scales: {\n                    x: {\n                        title: {\n                            display: true,\n                            text: 'Время',\n                        },\n                    },\n                    y: {\n                        title: {\n                            display: true,\n                            text: 'Значение',\n                        },\n                    },\n                },\n            },\n        });\n\n        const updateChartData = () => {\n            const time = [];\n            const emf = [];\n            const inductionCurrent = [];\n            for (let t = 0; t <= 10; t += 0.01) {\n                time.push(t.toFixed(2));\n                const angularFrequency = 2 * Math.PI * rotationFrequency;\n                const emfValue = magneticField * angularFrequency * circuitResistance * Math.sin(angularFrequency * t);\n                emf.push(emfValue.toFixed(2));\n                const inductionCurrentValue = emfValue / circuitResistance;\n                inductionCurrent.push(inductionCurrentValue.toFixed(2));\n            }\n\n            // Обновление данных на графике\n            chart.data.labels = time;\n            chart.data.datasets[0].data = emf;\n            chart.data.datasets[1].data = inductionCurrent;\n            chart.update();\n        };\n\n        updateChartData();\n\n        return () => {\n            chart.destroy();\n        };\n    }, [magneticField, rotationFrequency, circuitResistance]);\n\n    return (\n        <div>\n            <div>\n                <label>\n                    Величина магнитного поля:\n                    <input\n                        type=\"number\"\n                        value={magneticField}\n                        onChange={(e) => setMagneticField(parseFloat(e.target.value))}\n                    />\n                </label>\n            </div>\n            <div>\n                <label>\n                    Частота вращения:\n                    <input\n                        type=\"number\"\n                        value={rotationFrequency}\n                        onChange={(e) => setRotationFrequency(parseFloat(e.target.value))}\n                    />\n                </label>\n            </div>\n            <div>\n                <label>\n                    Сопротивление контура:\n                    <input\n                        type=\"number\"\n                        value={circuitResistance}\n                        onChange={(e) => setCircuitResistance(parseFloat(e.target.value))}\n                    />\n                </label>\n            </div>\n            <canvas id=\"generatorChart\" width=\"800\" height=\"400\"></canvas>\n        </div>\n    );\n};\n\nexport default GeneratorSimulation;\n","import React from 'react';\nimport GeneratorSimulation from './GeneratorSimulation';\n\nconst App = () => {\n    return (\n        <div>\n            <h1>Моделирование электрогенератора</h1>\n            <GeneratorSimulation />\n        </div>\n    );\n};\n\nexport default App;\n","// src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}